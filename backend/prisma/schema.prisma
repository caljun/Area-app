// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  nowId     String   @unique
  name      String
  password  String
  profileImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  areas         Area[]
  friendRequests FriendRequest[] @relation("FriendRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friends       Friend[] @relation("UserFriends")
  friendOf      Friend[] @relation("FriendOfUser")
  locations     Location[]
  areaRequests  AreaRequest[] @relation("AreaRequestSender")
  receivedAreaRequests AreaRequest[] @relation("AreaRequestReceiver")
  images        Image[]
  areaMembers   AreaMember[] @relation("AreaMembers")
  addedAreaMembers AreaMember[] @relation("AreaMemberAddedBy")

  @@map("users")
}

model Area {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  coordinates Json     // Array of {latitude: number, longitude: number}
  userId      String   @db.ObjectId
  isPublic    Boolean  @default(false)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  areaRequests AreaRequest[] @relation("AreaRequests")
  areaMembers  AreaMember[]  @relation("AreaMembers")

  @@map("areas")
}

model Friend {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  friendId String @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friends")
}

model FriendRequest {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  receiverId String @db.ObjectId
  status   RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender   User @relation("FriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model AreaRequest {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  receiverId String @db.ObjectId
  areaId   String @db.ObjectId
  status   RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender   User @relation("AreaRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("AreaRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  area     Area @relation("AreaRequests", fields: [areaId], references: [id], onDelete: Cascade)

  @@map("area_requests")
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("locations")
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  url       String
  publicId  String   // Cloudinary public ID
  type      ImageType
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("images")
}

model AreaMember {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  areaId   String @db.ObjectId
  userId   String @db.ObjectId
  addedBy  String @db.ObjectId  // 誰によって追加されたか
  createdAt DateTime @default(now())

  // Relations
  area    Area @relation("AreaMembers", fields: [areaId], references: [id], onDelete: Cascade)
  user    User @relation("AreaMembers", fields: [userId], references: [id], onDelete: Cascade)
  addedByUser User @relation("AreaMemberAddedBy", fields: [addedBy], references: [id], onDelete: Cascade)

  @@unique([areaId, userId])
  @@map("area_members")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ImageType {
  PROFILE
  AREA
  GENERAL
} 