// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  displayId String?  @unique             // ユーザー入力ID（検索用）
  email     String   @unique
  areaId    String?  @unique
  name      String?  // Apple IDユーザーは名前がない場合があるためオプショナル
  password  String?  // Apple IDユーザーはパスワードなしの場合があるためオプショナル
  profileImage String?
  deviceToken String? // プッシュ通知用のデバイストークン
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  areas         Area[]
  friendRequests FriendRequest[] @relation("FriendRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friends       Friend[] @relation("UserFriends")
  friendOf      Friend[] @relation("FriendOfUser")
  locations     Location[]
  areaRequests  AreaRequest[] @relation("AreaRequestSender")
  receivedAreaRequests AreaRequest[] @relation("AreaRequestReceiver")
  images        Image[]
  areaMembers   AreaMember[] @relation("AreaMembers")
  addedAreaMembers AreaMember[] @relation("AreaMemberAddedBy")
  notifications Notification[] @relation("NotificationRecipient")
  sentNotifications Notification[] @relation("NotificationSender")
  notificationSettings NotificationSettings[]
  // チャット関連
  chatUser1    Chat[] @relation("ChatUser1")
  chatUser2    Chat[] @relation("ChatUser2")
  messages     Message[] @relation("MessageSender")
  // エリア招待関連
  areaInvitationInvited AreaInvitation[] @relation("AreaInvitationInvited")
  areaInvitationInviter AreaInvitation[] @relation("AreaInvitationInviter")
  // 投稿関連
  posts    Post[]
  comments Comment[]
  postLikes PostLike[]
  // ジオフェンス参加ログ関連
  participationLogs ParticipationLog[]

  @@map("users")
}

model Area {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  coordinates Json     // Array of {latitude: number, longitude: number}
  userId      String   @db.ObjectId
  isPublic    Boolean  @default(false)
  imageUrl    String?
  isDeleted   Boolean  @default(false) // 論理削除フラグ
  deletedAt   DateTime? // 削除日時
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  areaRequests AreaRequest[] @relation("AreaRequests")
  areaMembers  AreaMember[]  @relation("AreaMembers")
  areaInvitations AreaInvitation[] @relation("AreaInvitations")
  locations    Location[]    // エリア内の位置情報
  posts        Post[]       // エリア内の投稿
  // ジオフェンス参加ログ関連
  participationLogs ParticipationLog[]
  // エリア統計関連
  statistics   AreaStatistics?

  @@map("areas")
}

model Friend {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  friendId String @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friends")
}

model FriendRequest {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  receiverId String @db.ObjectId
  status   RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender   User @relation("FriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model AreaRequest {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  receiverId String @db.ObjectId
  areaId   String @db.ObjectId
  status   RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender   User @relation("AreaRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("AreaRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  area     Area @relation("AreaRequests", fields: [areaId], references: [id], onDelete: Cascade)

  @@map("area_requests")
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  latitude  Float
  longitude Float
  areaId    String?  @db.ObjectId  // エリアID（オプショナル）
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  area Area? @relation(fields: [areaId], references: [id], onDelete: SetNull)

  @@map("locations")
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  url       String
  publicId  String   // Cloudinary public ID
  type      ImageType
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("images")
}

model AreaMember {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  areaId   String @db.ObjectId
  userId   String @db.ObjectId
  addedBy  String @db.ObjectId  // 誰によって追加されたか
  createdAt DateTime @default(now())

  // Relations
  area    Area @relation("AreaMembers", fields: [areaId], references: [id], onDelete: Cascade)
  user    User @relation("AreaMembers", fields: [userId], references: [id], onDelete: Cascade)
  addedByUser User @relation("AreaMemberAddedBy", fields: [addedBy], references: [id], onDelete: Cascade)

  @@unique([areaId, userId])
  @@map("area_members")
}

// 通知システム用のモデル
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  data      Json     // 追加データ（例：エリアID、友達IDなど）
  isRead    Boolean  @default(false)
  isDeleted Boolean  @default(false)
  recipientId String @db.ObjectId
  senderId  String? @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipient User @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender    User? @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model NotificationSettings {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  userId                String @db.ObjectId @unique
  friendRequests        Boolean @default(true)
  areaInvites           Boolean @default(true)
  locationUpdates       Boolean @default(true)
  generalNotifications  Boolean @default(true)
  pushEnabled           Boolean @default(true)
  emailEnabled          Boolean @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

// チャット機能用のモデル
model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String   @db.ObjectId
  user2Id   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user1    User      @relation("ChatUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2    User      @relation("ChatUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([user1Id, user2Id])
  @@map("chats")
}

model Message {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  senderId    String      @db.ObjectId
  chatId      String      @db.ObjectId
  messageType MessageType @default(TEXT)
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  sender User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// エリア招待用のモデル
model AreaInvitation {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  areaId        String @db.ObjectId
  invitedUserId String @db.ObjectId
  invitedBy     String @db.ObjectId
  status        RequestStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  area         Area @relation("AreaInvitations", fields: [areaId], references: [id], onDelete: Cascade)
  invitedUser  User @relation("AreaInvitationInvited", fields: [invitedUserId], references: [id], onDelete: Cascade)
  invitedByUser User @relation("AreaInvitationInviter", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([areaId, invitedUserId])
  @@map("area_invitations")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ImageType {
  PROFILE
  AREA
  GENERAL
}

enum NotificationType {
  FRIEND_REQUEST
  AREA_INVITE
  LOCATION_UPDATE
  GENERAL
}

enum MessageType {
  TEXT
  IMAGE
  LOCATION
  AREA
}

// 投稿機能用のモデル
model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String
  location  Json     // GeoJSON Point { type: "Point", coordinates: [longitude, latitude] }
  areaId    String   @db.ObjectId // エリア内のみ投稿可能（必須）
  userId    String   @db.ObjectId
  userName  String?
  userProfileImage String?
  likeCount Int      @default(0)
  commentCount Int   @default(0)
  isLiked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  area     Area      @relation(fields: [areaId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    PostLike[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  userName  String?
  userProfileImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

// ジオフェンス参加ログ用のモデル
model ParticipationLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  areaId    String   @db.ObjectId
  enteredAt DateTime
  exitedAt  DateTime?
  durationSeconds Int? // 滞在時間（秒）
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  area Area @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@map("participation_logs")
}

// エリア統計情報用のモデル
model AreaStatistics {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  areaId                    String   @unique @db.ObjectId
  currentParticipants       Int      @default(0)
  totalPosts                Int      @default(0)
  totalVisits               Int      @default(0)
  averageStayTimeSeconds    Int      @default(0)
  lastActivity              DateTime?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  area Area @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@map("area_statistics")
} 